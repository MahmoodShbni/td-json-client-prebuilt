name: tdlib-build

# برای ساخت Release با GITHUB_TOKEN
permissions:
  contents: write

on:
  # فقط اجرای دستی از UI
  workflow_dispatch:

jobs:
  build-android:
    runs-on: ubuntu-22.04
    steps:
      - uses: actions/checkout@v4

      - name: JSON to variables
        uses: rgarcia-phi/json-to-variables@v1.1.0
        with:
          filename: '.github/workflows/td-version.json'
          prefix: td

      - name: Setup (packages)
        run: |
          sudo apt-get update
          sudo apt-get install -y make git zlib1g-dev libssl-dev gperf cmake clang libc++-dev libc++abi-dev ninja-build zip unzip wget

      - name: Download NDK
        run: |
          mkdir /opt/android-ndk-tmp
          cd /opt/android-ndk-tmp
          wget -q https://dl.google.com/android/repository/android-ndk-r20-linux-x86_64.zip
          unzip -q android-ndk-r20-linux-x86_64.zip
          sudo mv ./android-ndk-r20 /opt/android-ndk
          cd /opt/android-ndk
          sudo rm -rf /opt/android-ndk-tmp

      - name: Clone TDLib
        run: |
          git clone https://github.com/tdlib/td.git
          cd td
          git checkout ${{ env.td_commit_hash }}
          git show --summary

      - name: Prepare TDLib example for Android
        run: |
          cd td/example
          curl -L https://github.com/tdlib/td/files/4746919/libtdjsonandroid.zip -o libtdjsonandroid.zip
          unzip -o libtdjsonandroid.zip
          mv libtdjsonandroid/* .
          rmdir libtdjsonandroid
          rm libtdjsonandroid.zip
          chmod +x build.sh export.sh build-all.sh third_party/crypto/build.sh third_party/crypto/build-all.sh
          sed -i '3s/.*/set(TD_DIR ${CMAKE_CURRENT_SOURCE_DIR}\/..)/' CMakeLists.txt
          curl -L https://github.com/openssl/openssl/archive/refs/tags/OpenSSL_1_1_1g.tar.gz -o third_party/crypto/openssl-OpenSSL_1_1_1g.tar.gz
          sed -i '5s/.*/cmake .. -DCMAKE_TOOLCHAIN_FILE=\/opt\/android-ndk\/build\/cmake\/android.toolchain.cmake -DCMAKE_BUILD_TYPE=MinSizeRel -GNinja -DANDROID_ABI=${ABI} || exit 1/' build.sh
          sed -i '1s/.*/#!\/bin\/bash/' third_party/crypto/build.sh
          sed -i '21s/.*/HOST_ARCH=linux-x86_64/' third_party/crypto/build.sh
          sed -i '20s/.*/export ANDROID_NDK=\/opt\/android-ndk/' third_party/crypto/build.sh

      - name: Build OpenSSL (Android)
        env:
          ANDROID_NDK_HOME: /opt/android-ndk
          ANDROID_NDK_ROOT: /opt/android-ndk
        run: |
          cd td/example/third_party/crypto
          ./build-all.sh

      - name: Build TDLib (Android)
        run: |
          cd td/example
          ./export.sh

      - name: Zip Android libs
        run: |
          cd td/example/libs
          zip libs.zip arm64-v8a/libtdjsonandroid.so armeabi-v7a/libtdjsonandroid.so x86/libtdjsonandroid.so x86_64/libtdjsonandroid.so

      - name: Release (Android)
        uses: ncipollo/release-action@v1
        with:
          tag: android-${{ env.td_version }}-${{ env.td_commit_hash }}
          name: Android ${{ env.td_version }}-${{ env.td_commit_hash }}
          body: https://github.com/tdlib/td/tree/${{ env.td_commit_hash }}
          token: ${{ secrets.GITHUB_TOKEN }}
          artifacts: 'td/example/libs/libs.zip'

  build-macos-intel:
    runs-on: macos-13
    steps:
      - uses: actions/checkout@v4

      - name: JSON to variables
        uses: rgarcia-phi/json-to-variables@v1.1.0
        with:
          filename: '.github/workflows/td-version.json'
          prefix: td

      - name: Setup (brew)
        run: |
          brew update
          brew install gperf cmake coreutils zip

      - name: Clone TDLib
        run: |
          git clone https://github.com/tdlib/td.git
          cd td
          git checkout ${{ env.td_commit_hash }}
          git show --summary

      - name: Prepare macOS build scripts
        run: |
          cd td/example/ios
          sed -i '.bak' '11s/.*/platforms="macOS"/' build-openssl.sh
          sed -i '.bak' '24s/.*/platforms="macOS"/' build.sh

      - name: Build OpenSSL (macOS)
        run: |
          cd td/example/ios
          ./build-openssl.sh

      - name: Build TDLib (macOS dylib)
        run: |
          cd td/example/ios
          ./build.sh

      - name: Zip macOS dylib
        run: |
          cd td/example/ios/tdjson/macOS/lib/
          zip libtdjson.zip libtdjson.dylib

      - name: Release (macOS-Intel)
        uses: ncipollo/release-action@v1
        with:
          tag: macos-intel-${{ env.td_version }}-${{ env.td_commit_hash }}
          name: MacOS Intel ${{ env.td_version }}-${{ env.td_commit_hash }}
          body: https://github.com/tdlib/td/tree/${{ env.td_commit_hash }}
          token: ${{ secrets.GITHUB_TOKEN }}
          artifacts: 'td/example/ios/tdjson/macOS/lib/libtdjson.zip'

  build-ios:
    runs-on: macos-13
    steps:
      - uses: actions/checkout@v4

      - name: JSON to variables
        uses: rgarcia-phi/json-to-variables@v1.1.0
        with:
          filename: '.github/workflows/td-version.json'
          prefix: td

      - name: Setup (brew)
        run: |
          brew update
          brew install gperf cmake coreutils zip

      - name: Clone TDLib
        run: |
          git clone https://github.com/tdlib/td.git
          cd td
          git checkout ${{ env.td_commit_hash }}
          git show --summary

      - name: Prepare native tools & iOS scripts
        run: |
          cd td
          mkdir native-build
          cd native-build
          cmake ..
          cmake --build . --target prepare_cross_compiling
          cd ../example/ios
          sed -i '.bak' '11s/.*/platforms="iOS"/' build-openssl.sh
          sed -i '.bak' '24s/.*/platforms="iOS"/' build.sh

      - name: Build OpenSSL (iOS)
        run: |
          cd td/example/ios
          ./build-openssl.sh

      - name: Build TDLib (iOS)
        run: |
          cd td/example/ios
          ./build.sh

      - name: Zip iOS dylib
        run: |
          cd td/example/ios/tdjson/iOS/lib/
          zip libtdjson.zip libtdjson.dylib

      - name: Release (iOS)
        uses: ncipollo/release-action@v1
        with:
          tag: ios-${{ env.td_version }}-${{ env.td_commit_hash }}
          name: iOS ${{ env.td_version }}-${{ env.td_commit_hash }}
          body: https://github.com/tdlib/td/tree/${{ env.td_commit_hash }}
          token: ${{ secrets.GITHUB_TOKEN }}
          artifacts: 'td/example/ios/tdjson/iOS/lib/libtdjson.zip'

  build-linux-x64:
    runs-on: ubuntu-22.04
    steps:
      - uses: actions/checkout@v4

      - name: JSON to variables
        uses: rgarcia-phi/json-to-variables@v1.1.0
        with:
          filename: '.github/workflows/td-version.json'
          prefix: td

      - name: Setup (packages)
        run: |
          sudo apt-get update
          sudo apt-get install -y make git zlib1g-dev libssl-dev gperf php-cli cmake g++ zip

      - name: Clone TDLib
        run: |
          git clone https://github.com/tdlib/td.git
          cd td
          git checkout ${{ env.td_commit_hash }}
          git show --summary

      - name: Build TDLib (Linux)
        run: |
          cd td
          rm -rf build
          mkdir build
          cd build
          cmake -DCMAKE_BUILD_TYPE=Release -DCMAKE_INSTALL_PREFIX:PATH=../tdlib ..
          cmake --build . --target prepare_cross_compiling
          cd ..
          php SplitSource.php
          cd build
          cmake --build . --target install
          cd ..
          php SplitSource.php --undo

      - name: Zip Linux lib
        run: |
          cd td/tdlib/lib
          zip libtdjson.zip libtdjson.so

      - name: Release (Linux x64)
        uses: ncipollo/release-action@v1
        with:
          tag: linux-x64-${{ env.td_version }}-${{ env.td_commit_hash }}
          name: Linux x64 ${{ env.td_version }}-${{ env.td_commit_hash }}
          body: https://github.com/tdlib/td/tree/${{ env.td_commit_hash }}
          token: ${{ secrets.GITHUB_TOKEN }}
          artifacts: 'td/tdlib/lib/libtdjson.zip'

  build-windows-x64:
    runs-on: windows-2022
    steps:
      - uses: actions/checkout@v4

      - name: JSON to variables
        uses: rgarcia-phi/json-to-variables@v1.1.0
        with:
          filename: '.github/workflows/td-version.json'
          prefix: td

      - name: Clone TDLib
        run: |
          git clone https://github.com/tdlib/td.git
          cd td
          git checkout ${{ env.td_commit_hash }}
          git show --summary

      - name: Setup vcpkg
        run: |
          cd td
          git clone https://github.com/Microsoft/vcpkg.git
          cd vcpkg
          git checkout cd5e746ec203c8c3c61647e0886a8df8c1e78e41
          ./bootstrap-vcpkg.bat
          ./vcpkg.exe install gperf:x64-windows openssl:x64-windows zlib:x64-windows

      - name: Build TDLib (Windows)
        run: |
          cd td
          mkdir build
          cd build
          cmake -A x64 -DCMAKE_INSTALL_PREFIX:PATH=../tdlib -DCMAKE_TOOLCHAIN_FILE:FILEPATH=../vcpkg/scripts/buildsystems/vcpkg.cmake ..
          cmake --build . --target install --config Release

      - name: Zip Windows DLLs
        run: |
          cd td/tdlib/bin
          dir
          ren libcrypto-3-x64.dll libcrypto-1_1.dll
          ren libssl-3-x64.dll libssl-1_1.dll
          7z a -tzip dlls.zip libcrypto-1_1.dll libssl-1_1.dll tdjson.dll zlib1.dll

      - name: Release (Windows x64)
        uses: ncipollo/release-action@v1
        with:
          tag: windows-x64-${{ env.td_version }}-${{ env.td_commit_hash }}
          name: Windows x64 ${{ env.td_version }}-${{ env.td_commit_hash }}
          body: https://github.com/tdlib/td/tree/${{ env.td_commit_hash }}
          token: ${{ secrets.GITHUB_TOKEN }}
          artifacts: 'td/tdlib/bin/dlls.zip'
